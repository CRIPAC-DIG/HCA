

params:
    ('mode', 'test')
    ('split', [0.8])
    ('at_nums', [1, 2, 5, 10, 15, 20])
    ('epochs', 100)
    ('latent_size', [20, 1024, 100])
    ('alpha', 0.01)
    ('lambda', 0.001)
    ('window_h', 2)
    ('window_x', 2)
    ('batch_size_train', 1)
    ('batch_size_test', 600)
    Original data ...
        users num:        36986
        trans num:        1640433
        items num:        267948
        sparsity:         0.999834472326
        avg. user buy:    44.352809171
        avg. item bought: 6.12220654754
    Remove duplicates in test set: mode = test ...
        user  num:        36986
        trans num:        1593119
        items num:        267948
        sparsity:         0.999839246539
        avg. user buy:    43.0735683772
        avg. item bought: 5.94562750982
    Devide test items into intervals ...
        intervals               = [2, 10, 30]
        test_i_intervals_cumsum = [ 90619 133396 158734 176397 189578 200577 211026 218114 225171 295418]
        test_i_cold_warm        = [133396 162022]
data:
	--------------------------------------------------------------
    split=0.8, test自身去重，剩【5.94】
    All values is the "best * 100" on epoch 99:
    每个跑4次：
        109 *2,
        151 *1,
        111 *1

【【【【【【【【【【【【【【【【【【【【【【【【【【【【【【【【【【【【【【【【【【【【【【【【【【【【【【【【【【【【【【【【【【【【【【【【【【【
MArank: 3次平均
    --------------------------------------------------------------

MArank:
    epoch = 200
    lam = 0.001
    batch = 16
    len/lay = 3/4 - 【batch=16，这个最好】
                AUC       = [65.1869],          [150]
                Recall    = [0.6442, 0.8648, 1.0311, 1.1847],           [199 199 199 199]
                MAP       = [0.7747, 0.8113, 0.8284, 0.8400],           [199 199 199 199]
                NDCG      = [1.5021, 1.4668, 1.5374, 1.6075],           [199 199 199 199]

    batch = 4
    len/lay = 2/2 - 【batch=4/epoch=100，这个最佳】【paper用这组，效果有些比我的好。。。】
                AUC       = [65.0974],          [42]
                Recall    = [0.8141, 1.1007, 1.3054, 1.5018],           [99 99 99 99]
                MAP       = [0.8853, 0.9352, 0.9568, 0.9729],           [99 99 99 99]
                NDCG      = [1.8102, 1.7541, 1.8395, 1.9270],           [99 99 99 99]

MArank:
    --------------------------------------------------------------
    【逐条训练】【太慢，不现实】
        -----------------------------------------------------------------
        All values is the "best * 100" on epoch 16: | 2019.03.19 18:34:58 | 19.64h/17=1.16h
                AUC       = [63.7370],          [9]
                Recall    = [0.0746, 0.1203, 0.1739, 0.2228],           [9 9 9 9]
                MAP       = [0.0361, 0.0424, 0.0468, 0.0498],           [9 9 9 9]
                NDCG      = [0.1158, 0.1217, 0.1485, 0.1720],           [9 9 9 9]
        avg. time (train, user, test): 4086s, 0s, 69s | alpha, lam: 0.01, 0.001 | model: OboMArank

    【mini-batch = 16】【无效果，很差】
        -----------------------------------------------------------------
        All values is the "best * 100" on epoch 99: | 2019.03.19 15:47:17 | 13.35h/100=0.13h
                AUC       = [50.6143],          [98]
                Recall    = [0.0036, 0.0047, 0.0065, 0.0080],           [28 16  0  0]
                MAP       = [0.0012, 0.0013, 0.0014, 0.0015],           [39 94 94 39]
                NDCG      = [0.0048, 0.0042, 0.0045, 0.0053],           [39 20 15 39]
        avg. time (train, user, test): 353s, 0s, 122s | alpha, lam: 0.01, 0.001 | model: MArank


